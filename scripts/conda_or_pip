#!/usr/bin/python

import argparse
import logging

from subprocess import check_output, check_call, CalledProcessError

logging.basicConfig(level=logging.INFO, format='%(asctime)s {}: %(message)s'.format(__file__))

def install(package, force_yes):
    """ Installs a package with conda if availabe, with pip otherwise.

    :param: package: String - The package to install
    :param: force_yes: Boolean - Non-interactive installation
    """
    out = check_output(['conda', 'search', package])
    try:
        if not out:
            logging.info("Package not found in conda repository, installing it through pip")
            check_call(['pip', 'install', package])
        else:
            logging.info("Package found! Installing with conda")
            if force_yes:
                check_call(['conda', 'install', '--yes', package])
            else:
                check_call(['conda', 'install', package])

    except CalledProcessError:
        raise RuntimeError('Package not found neither in conda nor pip, sorry!')


if __name__=='__main__':
    parser = argparse.ArgumentParser(description='Install packages with conda and, ' \
            'if they are not available, do it with pip.')
    parser.add_argument('package', type=str, help='Package to install')
    parser.add_argument('--yes', action='store_true', help='Non-interactive installation')
    args = parser.parse_args()
    install(args.package, args.yes)
